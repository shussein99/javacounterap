pipeline {
  
  agent any 

  parameters{
      
      choice(name : 'action', choices: 'apply\ndelete', description: 'apply or delete on aws cluster')
      string(name : 'cluster', defaultValue: 'eks', description: 'choose EKS Cluster Name')
      string(name : 'region', defaultValue: 'us-east-2', description: 'choose AWS region of cluster')

  }

  environment{

      ACCESS_KEY= credentials('AWS_ACCESSKEY_ID')
      SECRET_KEY= credentials('AWS_SECRETKEY_ID')
  }
  
  stages{
    
    stage('Git-Checkout'){
        
        steps{
            
           script{
               
               git branch: 'main', url: 'https://github.com/shussein99/javacounterap.git'
               
                }
            
             } 
        
        }

    stage('Connect with cluster'){
        
        steps{
            
           script{
               
               sh """
               aws configure set aws_access_key_id= "$ACCESS_KEY"
               aws configure set aws_secret_key_id= "$SECRET_KEY"
               aws configure set region "${params.region}"

               aws eks --region ${params.region} update-kubeconfig --name ${params.cluster}

            """
                }
            
             } 
        
        }    

    stage('Deploy on EKS cluster'){
        
        when { expression {params.action == 'apply'} }
        steps{
            
           script{
               
               def apply = false

               try{
                input message: 'please confirm', ok: 'Ready to apply'
                apply = true
                 }catch(err){
                  apply = false
                  currentBuild.result ='unstable'  
                 }
                 if(apply){
                sh """
                    kubectl apply -f .               
                   """
                         }
                 }
             }     
        }    
    stage('Deletion on EKS cluster'){
        
        when { expression {params.action == 'delete'} }
        steps{
            
           script{
               
               def delete = false

               try{
                input message: 'please confirm', ok: 'Ready to apply'
                delete = true
                 }catch(err){
                  delete = false
                  currentBuild.result ='unstable'  
                 }
                 if(delete){
                sh """
                    kubectl delete -f .               
                   """
                         }
                 }
             }     
          }    

     }

}